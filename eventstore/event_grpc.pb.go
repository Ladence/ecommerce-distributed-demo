// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: eventstore/event.proto

package eventstore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventSourceClient is the client API for EventSource service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventSourceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error)
	GetEventsStream(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventSource_GetEventsStreamClient, error)
}

type eventSourceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventSourceClient(cc grpc.ClientConnInterface) EventSourceClient {
	return &eventSourceClient{cc}
}

func (c *eventSourceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/EventSource/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) GetEvents(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (*GetEventsResponse, error) {
	out := new(GetEventsResponse)
	err := c.cc.Invoke(ctx, "/EventSource/GetEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventSourceClient) GetEventsStream(ctx context.Context, in *GetEventsRequest, opts ...grpc.CallOption) (EventSource_GetEventsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventSource_ServiceDesc.Streams[0], "/EventSource/GetEventsStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventSourceGetEventsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventSource_GetEventsStreamClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type eventSourceGetEventsStreamClient struct {
	grpc.ClientStream
}

func (x *eventSourceGetEventsStreamClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventSourceServer is the server API for EventSource service.
// All implementations must embed UnimplementedEventSourceServer
// for forward compatibility
type EventSourceServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error)
	GetEventsStream(*GetEventsRequest, EventSource_GetEventsStreamServer) error
	mustEmbedUnimplementedEventSourceServer()
}

// UnimplementedEventSourceServer must be embedded to have forward compatible implementations.
type UnimplementedEventSourceServer struct {
}

func (UnimplementedEventSourceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedEventSourceServer) GetEvents(context.Context, *GetEventsRequest) (*GetEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvents not implemented")
}
func (UnimplementedEventSourceServer) GetEventsStream(*GetEventsRequest, EventSource_GetEventsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventsStream not implemented")
}
func (UnimplementedEventSourceServer) mustEmbedUnimplementedEventSourceServer() {}

// UnsafeEventSourceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventSourceServer will
// result in compilation errors.
type UnsafeEventSourceServer interface {
	mustEmbedUnimplementedEventSourceServer()
}

func RegisterEventSourceServer(s grpc.ServiceRegistrar, srv EventSourceServer) {
	s.RegisterService(&EventSource_ServiceDesc, srv)
}

func _EventSource_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventSource/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_GetEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventSourceServer).GetEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventSource/GetEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventSourceServer).GetEvents(ctx, req.(*GetEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventSource_GetEventsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventSourceServer).GetEventsStream(m, &eventSourceGetEventsStreamServer{stream})
}

type EventSource_GetEventsStreamServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type eventSourceGetEventsStreamServer struct {
	grpc.ServerStream
}

func (x *eventSourceGetEventsStreamServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// EventSource_ServiceDesc is the grpc.ServiceDesc for EventSource service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventSource_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventSource",
	HandlerType: (*EventSourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventSource_CreateEvent_Handler,
		},
		{
			MethodName: "GetEvents",
			Handler:    _EventSource_GetEvents_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetEventsStream",
			Handler:       _EventSource_GetEventsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "eventstore/event.proto",
}
